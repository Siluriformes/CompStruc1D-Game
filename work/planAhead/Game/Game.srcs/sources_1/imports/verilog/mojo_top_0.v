/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    input [23:0] io_dip,
    input [4:0] io_button,
    output reg [7:0] led,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel
  );
  
  
  
  reg rst;
  
  reg [2:0] check;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [9-1:0] M_cdtimer_out;
  reg [9-1:0] M_cdtimer_in;
  reg [2-1:0] M_cdtimer_enable;
  cd_timer_2 cdtimer (
    .clk(clk),
    .rst(rst),
    .in(M_cdtimer_in),
    .enable(M_cdtimer_enable),
    .out(M_cdtimer_out)
  );
  wire [3-1:0] M_t1_out;
  reg [1-1:0] M_t1_w1;
  reg [1-1:0] M_t1_w2;
  reg [1-1:0] M_t1_w3;
  reg [1-1:0] M_t1_w4;
  reg [1-1:0] M_t1_w5;
  reg [1-1:0] M_t1_w6;
  reg [1-1:0] M_t1_enable;
  task1_3 t1 (
    .clk(clk),
    .rst(rst),
    .w1(M_t1_w1),
    .w2(M_t1_w2),
    .w3(M_t1_w3),
    .w4(M_t1_w4),
    .w5(M_t1_w5),
    .w6(M_t1_w6),
    .enable(M_t1_enable),
    .out(M_t1_out)
  );
  wire [3-1:0] M_t2_out;
  wire [1-1:0] M_t2_led1;
  wire [1-1:0] M_t2_led2;
  wire [1-1:0] M_t2_led3;
  wire [1-1:0] M_t2_led4;
  wire [1-1:0] M_t2_led5;
  wire [1-1:0] M_t2_led6;
  wire [1-1:0] M_t2_led7;
  wire [1-1:0] M_t2_led8;
  reg [1-1:0] M_t2_but1;
  reg [1-1:0] M_t2_but2;
  reg [1-1:0] M_t2_but3;
  reg [1-1:0] M_t2_but4;
  reg [1-1:0] M_t2_but5;
  reg [1-1:0] M_t2_but6;
  reg [1-1:0] M_t2_but7;
  reg [1-1:0] M_t2_but8;
  reg [2-1:0] M_t2_enable;
  task2_4 t2 (
    .clk(clk),
    .rst(rst),
    .but1(M_t2_but1),
    .but2(M_t2_but2),
    .but3(M_t2_but3),
    .but4(M_t2_but4),
    .but5(M_t2_but5),
    .but6(M_t2_but6),
    .but7(M_t2_but7),
    .but8(M_t2_but8),
    .enable(M_t2_enable),
    .out(M_t2_out),
    .led1(M_t2_led1),
    .led2(M_t2_led2),
    .led3(M_t2_led3),
    .led4(M_t2_led4),
    .led5(M_t2_led5),
    .led6(M_t2_led6),
    .led7(M_t2_led7),
    .led8(M_t2_led8)
  );
  wire [1-1:0] M_t3_rout;
  wire [1-1:0] M_t3_bout;
  wire [1-1:0] M_t3_gout;
  wire [1-1:0] M_t3_yout;
  wire [3-1:0] M_t3_out;
  reg [1-1:0] M_t3_enable;
  reg [1-1:0] M_t3_r;
  reg [1-1:0] M_t3_b;
  reg [1-1:0] M_t3_g;
  reg [1-1:0] M_t3_y;
  task3_5 t3 (
    .clk(clk),
    .rst(rst),
    .enable(M_t3_enable),
    .r(M_t3_r),
    .b(M_t3_b),
    .g(M_t3_g),
    .y(M_t3_y),
    .rout(M_t3_rout),
    .bout(M_t3_bout),
    .gout(M_t3_gout),
    .yout(M_t3_yout),
    .out(M_t3_out)
  );
  wire [3-1:0] M_t4_out;
  reg [1-1:0] M_t4_in;
  task4_6 t4 (
    .clk(clk),
    .rst(rst),
    .in(M_t4_in),
    .out(M_t4_out)
  );
  wire [8-1:0] M_seg_display_seg;
  wire [4-1:0] M_seg_display_sel;
  reg [24-1:0] M_seg_display_values;
  multi_seven_seg_7 seg_display (
    .clk(clk),
    .rst(rst),
    .values(M_seg_display_values),
    .seg(M_seg_display_seg),
    .sel(M_seg_display_sel)
  );
  reg [25:0] M_counter_d, M_counter_q = 1'h0;
  localparam IDLE_state = 2'd0;
  localparam COUNTDOWN_state = 2'd1;
  localparam BOOM_state = 2'd2;
  
  reg [1:0] M_state_d, M_state_q = IDLE_state;
  
  wire [6-1:0] M_timedigit_out2;
  wire [6-1:0] M_timedigit_out1;
  wire [6-1:0] M_timedigit_out0;
  reg [9-1:0] M_timedigit_in;
  time_digit_8 timedigit (
    .in(M_timedigit_in),
    .out2(M_timedigit_out2),
    .out1(M_timedigit_out1),
    .out0(M_timedigit_out0)
  );
  
  always @* begin
    M_state_d = M_state_q;
    M_counter_d = M_counter_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led[0+7-:8] = 8'h00;
    io_led = 24'h000000;
    M_cdtimer_in = 9'h12c;
    M_cdtimer_enable = 1'h0;
    M_t1_enable = 1'h0;
    M_t2_enable = 1'h0;
    M_t3_enable = 1'h0;
    M_t4_in = io_button[4+0-:1];
    M_t1_w1 = io_dip[16+7+0-:1];
    M_t1_w2 = io_dip[16+6+0-:1];
    M_t1_w3 = io_dip[16+5+0-:1];
    M_t1_w4 = io_dip[16+4+0-:1];
    M_t1_w5 = io_dip[16+3+0-:1];
    M_t1_w6 = io_dip[16+2+0-:1];
    M_t2_but1 = io_dip[8+7+0-:1];
    M_t2_but2 = io_dip[8+6+0-:1];
    M_t2_but3 = io_dip[8+5+0-:1];
    M_t2_but4 = io_dip[8+4+0-:1];
    M_t2_but5 = io_dip[8+3+0-:1];
    M_t2_but6 = io_dip[8+2+0-:1];
    M_t2_but7 = io_dip[8+1+0-:1];
    M_t2_but8 = io_dip[8+0+0-:1];
    io_led[0+7+0-:1] = M_t2_led1;
    io_led[0+6+0-:1] = M_t2_led2;
    io_led[0+5+0-:1] = M_t2_led3;
    io_led[0+4+0-:1] = M_t2_led4;
    io_led[0+3+0-:1] = M_t2_led5;
    io_led[0+2+0-:1] = M_t2_led6;
    io_led[0+1+0-:1] = M_t2_led7;
    io_led[0+0+0-:1] = M_t2_led8;
    M_t3_r = io_button[0+0-:1];
    M_t3_b = io_button[2+0-:1];
    M_t3_g = io_button[3+0-:1];
    M_t3_y = io_button[4+0-:1];
    led[7+0-:1] = M_t3_rout;
    led[5+0-:1] = M_t3_bout;
    led[3+0-:1] = M_t3_gout;
    led[1+0-:1] = M_t3_yout;
    M_timedigit_in = M_cdtimer_out;
    M_seg_display_values = {6'h10, M_timedigit_out2, M_timedigit_out1, M_timedigit_out0};
    io_seg = ~M_seg_display_seg;
    io_sel = ~M_seg_display_sel;
    check = M_t1_out + M_t2_out + M_t3_out + M_t4_out;
    
    case (check)
      1'h1: begin
        io_led[0+7-:8] = 8'h69;
      end
      2'h2: begin
        io_led[0+7-:8] = 8'h69;
        io_led[8+7-:8] = 8'haa;
      end
      2'h3: begin
        io_led[0+7-:8] = 8'h69;
        io_led[8+7-:8] = 8'haa;
        io_led[16+7-:8] = 8'hf0;
      end
      3'h4: begin
        io_led[0+7-:8] = 8'h69;
        io_led[8+7-:8] = 8'hc3;
        io_led[16+7-:8] = 8'hf0;
      end
    endcase
    
    case (M_state_q)
      IDLE_state: begin
        if (io_button[1+0-:1] == 1'h1 && io_dip[0+7-:8] != 8'h69) begin
          M_cdtimer_enable = 1'h1;
          M_t1_enable = 1'h1;
          M_t2_enable = 1'h1;
          M_t3_enable = 1'h1;
          M_state_d = COUNTDOWN_state;
        end
      end
      COUNTDOWN_state: begin
        if (io_button[1+0-:1] == 1'h1 && io_dip == 24'hf0aa69 && check > 2'h2) begin
          M_cdtimer_enable = 2'h2;
          M_state_d = IDLE_state;
        end
        if (io_button[1+0-:1] == 1'h1 && io_dip == 24'hf0c369 && check > 2'h2) begin
          M_cdtimer_enable = 2'h2;
          M_state_d = IDLE_state;
        end
        if (M_cdtimer_out == 1'h0) begin
          M_state_d = BOOM_state;
        end
      end
      BOOM_state: begin
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[25+0-:1] == 1'h1) begin
          M_seg_display_values = 24'h3ca000;
        end else begin
          M_seg_display_values = 24'h3cf3cf;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counter_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
