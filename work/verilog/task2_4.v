/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module task2_4 (
    input clk,
    input rst,
    input but1,
    input but2,
    input but3,
    input but4,
    input but5,
    input but6,
    input but7,
    input but8,
    input [1:0] enable,
    output reg [2:0] out,
    output reg led1,
    output reg led2,
    output reg led3,
    output reg led4,
    output reg led5,
    output reg led6,
    output reg led7,
    output reg led8
  );
  
  
  
  wire [1-1:0] M_ed1_out;
  reg [1-1:0] M_ed1_in;
  edge_detector_9 ed1 (
    .clk(clk),
    .in(M_ed1_in),
    .out(M_ed1_out)
  );
  wire [1-1:0] M_bc1_out;
  reg [1-1:0] M_bc1_in;
  button_conditioner_10 bc1 (
    .clk(clk),
    .in(M_bc1_in),
    .out(M_bc1_out)
  );
  wire [1-1:0] M_ed2_out;
  reg [1-1:0] M_ed2_in;
  edge_detector_9 ed2 (
    .clk(clk),
    .in(M_ed2_in),
    .out(M_ed2_out)
  );
  wire [1-1:0] M_bc2_out;
  reg [1-1:0] M_bc2_in;
  button_conditioner_10 bc2 (
    .clk(clk),
    .in(M_bc2_in),
    .out(M_bc2_out)
  );
  wire [1-1:0] M_ed3_out;
  reg [1-1:0] M_ed3_in;
  edge_detector_9 ed3 (
    .clk(clk),
    .in(M_ed3_in),
    .out(M_ed3_out)
  );
  wire [1-1:0] M_bc3_out;
  reg [1-1:0] M_bc3_in;
  button_conditioner_10 bc3 (
    .clk(clk),
    .in(M_bc3_in),
    .out(M_bc3_out)
  );
  wire [1-1:0] M_ed4_out;
  reg [1-1:0] M_ed4_in;
  edge_detector_9 ed4 (
    .clk(clk),
    .in(M_ed4_in),
    .out(M_ed4_out)
  );
  wire [1-1:0] M_bc4_out;
  reg [1-1:0] M_bc4_in;
  button_conditioner_10 bc4 (
    .clk(clk),
    .in(M_bc4_in),
    .out(M_bc4_out)
  );
  wire [1-1:0] M_ed5_out;
  reg [1-1:0] M_ed5_in;
  edge_detector_9 ed5 (
    .clk(clk),
    .in(M_ed5_in),
    .out(M_ed5_out)
  );
  wire [1-1:0] M_bc5_out;
  reg [1-1:0] M_bc5_in;
  button_conditioner_10 bc5 (
    .clk(clk),
    .in(M_bc5_in),
    .out(M_bc5_out)
  );
  wire [1-1:0] M_ed6_out;
  reg [1-1:0] M_ed6_in;
  edge_detector_9 ed6 (
    .clk(clk),
    .in(M_ed6_in),
    .out(M_ed6_out)
  );
  wire [1-1:0] M_bc6_out;
  reg [1-1:0] M_bc6_in;
  button_conditioner_10 bc6 (
    .clk(clk),
    .in(M_bc6_in),
    .out(M_bc6_out)
  );
  wire [1-1:0] M_ed7_out;
  reg [1-1:0] M_ed7_in;
  edge_detector_9 ed7 (
    .clk(clk),
    .in(M_ed7_in),
    .out(M_ed7_out)
  );
  wire [1-1:0] M_bc7_out;
  reg [1-1:0] M_bc7_in;
  button_conditioner_10 bc7 (
    .clk(clk),
    .in(M_bc7_in),
    .out(M_bc7_out)
  );
  wire [1-1:0] M_ed8_out;
  reg [1-1:0] M_ed8_in;
  edge_detector_9 ed8 (
    .clk(clk),
    .in(M_ed8_in),
    .out(M_ed8_out)
  );
  wire [1-1:0] M_bc8_out;
  reg [1-1:0] M_bc8_in;
  button_conditioner_10 bc8 (
    .clk(clk),
    .in(M_bc8_in),
    .out(M_bc8_out)
  );
  localparam IDLE_state = 2'd0;
  localparam INPUT_state = 2'd1;
  localparam WIN_state = 2'd2;
  
  reg [1:0] M_state_d, M_state_q = IDLE_state;
  reg [0:0] M_l1_d, M_l1_q = 1'h0;
  reg [0:0] M_l2_d, M_l2_q = 1'h0;
  reg [0:0] M_l3_d, M_l3_q = 1'h0;
  reg [0:0] M_l4_d, M_l4_q = 1'h0;
  reg [0:0] M_l5_d, M_l5_q = 1'h0;
  reg [0:0] M_l6_d, M_l6_q = 1'h0;
  reg [0:0] M_l7_d, M_l7_q = 1'h0;
  reg [0:0] M_l8_d, M_l8_q = 1'h0;
  
  always @* begin
    M_state_d = M_state_q;
    M_l8_d = M_l8_q;
    M_l6_d = M_l6_q;
    M_l7_d = M_l7_q;
    M_l4_d = M_l4_q;
    M_l5_d = M_l5_q;
    M_l2_d = M_l2_q;
    M_l3_d = M_l3_q;
    M_l1_d = M_l1_q;
    
    out = 1'h0;
    led1 = M_l1_q;
    led2 = M_l2_q;
    led3 = M_l3_q;
    led4 = M_l4_q;
    led5 = M_l5_q;
    led6 = M_l6_q;
    led7 = M_l7_q;
    led8 = M_l8_q;
    M_bc1_in = but1;
    M_ed1_in = M_bc1_out;
    M_bc2_in = but2;
    M_ed2_in = M_bc2_out;
    M_bc3_in = but3;
    M_ed3_in = M_bc3_out;
    M_bc4_in = but4;
    M_ed4_in = M_bc4_out;
    M_bc5_in = but5;
    M_ed5_in = M_bc5_out;
    M_bc6_in = but6;
    M_ed6_in = M_bc6_out;
    M_bc7_in = but7;
    M_ed7_in = M_bc7_out;
    M_bc8_in = but8;
    M_ed8_in = M_bc8_out;
    
    case (M_state_q)
      IDLE_state: begin
        if (enable) begin
          M_state_d = INPUT_state;
        end
      end
      INPUT_state: begin
        if (M_ed1_out) begin
          M_l1_d = M_l1_q + 1'h1;
        end
        if (M_ed2_out) begin
          M_l2_d = M_l2_q + 1'h1;
        end
        if (M_ed3_out) begin
          M_l3_d = M_l3_q + 1'h1;
        end
        if (M_ed4_out) begin
          M_l4_d = M_l4_q + 1'h1;
        end
        if (M_ed5_out) begin
          M_l5_d = M_l5_q + 1'h1;
        end
        if (M_ed6_out) begin
          M_l6_d = M_l6_q + 1'h1;
        end
        if (M_ed7_out) begin
          M_l7_d = M_l7_q + 1'h1;
        end
        if (M_ed8_out) begin
          M_l8_d = M_l8_q + 1'h1;
        end
        if (!M_l1_q && M_l2_q && M_l3_q && M_l4_q && !M_l5_q && !M_l6_q && M_l7_q && M_l8_q) begin
          M_state_d = WIN_state;
        end
      end
      WIN_state: begin
        M_l1_d = 1'h0;
        M_l2_d = 1'h0;
        M_l3_d = 1'h0;
        M_l4_d = 1'h0;
        M_l5_d = 1'h0;
        M_l6_d = 1'h0;
        M_l7_d = 1'h0;
        M_l8_d = 1'h0;
        out = 3'h1;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_l1_q <= 1'h0;
      M_l2_q <= 1'h0;
      M_l3_q <= 1'h0;
      M_l4_q <= 1'h0;
      M_l5_q <= 1'h0;
      M_l6_q <= 1'h0;
      M_l7_q <= 1'h0;
      M_l8_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_l1_q <= M_l1_d;
      M_l2_q <= M_l2_d;
      M_l3_q <= M_l3_d;
      M_l4_q <= M_l4_d;
      M_l5_q <= M_l5_d;
      M_l6_q <= M_l6_d;
      M_l7_q <= M_l7_d;
      M_l8_q <= M_l8_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
